{"version":3,"sources":["ng://@flosportsinc/ng-video-autoplay/lib/ng-video-autoplay.directive.ts","ng://@flosportsinc/ng-video-autoplay/lib/ng-video-autoplay.module.ts"],"names":["filterHalted","source","pipe","filter","res","halted","tryPlayVideoAsIs","flatMap","videoElement","play","then","catch","tryPlayVideoMuted","map","muted","volume","FloVideoAutoplayDirective","elmRef","rd","_this","this","floVideoAutoplay","floVideoAutoplayIndex","onDestroySource","Subject","onDestroy","share","canExecute","maybeVideoElement","maybe","nativeElement","e","nodeName","maybeUnmuteActionRef","floVideoAutoplayClickUnmuteRef","a","maybePlayActionRef","floVideoAutoplayClickPlayRef","hideRef","ref","setStyle","showRef","volumeChange","fromEvent","passive","evt","takeUntil","initOnVideo","tap","setAttribute","take","subscribe","preload","tapSome","runUnmuteSequence","actionRef","runOnce","v","prototype","ngAfterContentInit","videos","forEach","either","valueOrUndefined","toArray","left","right","ngOnDestroy","next","complete","Directive","args","selector","ElementRef","Renderer2","Input","ContentChildren","descendants","FloVideoAutoplayModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, Renderer2, OnDestroy, AfterContentInit, ContentChildren, QueryList } from '@angular/core'\nimport { share, takeUntil, map, flatMap, filter, tap, take } from 'rxjs/operators'\nimport { fromEvent, Subject, Observable } from 'rxjs'\nimport { maybe, either } from 'typescript-monads'\n\ninterface VideoHaltStatus {\n  readonly videoElement: HTMLVideoElement\n  readonly halted: boolean\n}\n\n// tslint:disable:no-object-mutation\nconst filterHalted =\n  (source: Observable<VideoHaltStatus>) =>\n    source.pipe(filter(res => res.halted === true))\n\nconst tryPlayVideoAsIs =\n  (source: Observable<HTMLVideoElement>) =>\n    source.pipe(flatMap(videoElement => videoElement.play()\n      .then(() => ({ videoElement, halted: false }))\n      .catch(() => ({ videoElement, halted: true }))\n    ), filterHalted)\n\nconst tryPlayVideoMuted =\n  (source: Observable<VideoHaltStatus>) =>\n    source.pipe(map(res => {\n      res.videoElement.muted = true\n      res.videoElement.volume = 0\n      return res.videoElement\n    }), tryPlayVideoAsIs)\n\n// 1) attempt to play as-is (including autoplay + unmuted)\n// 2) attempt to play muted, showing unmite button\n// 3) show click to play\n@Directive({\n  selector: '[floVideoAutoplay]'\n})\nexport class FloVideoAutoplayDirective implements AfterContentInit, OnDestroy {\n  @Input() public readonly floVideoAutoplay = true\n  @Input() public readonly floVideoAutoplayClickUnmuteRef?: HTMLElement\n  @Input() public readonly floVideoAutoplayClickPlayRef?: HTMLElement\n  @Input() public readonly floVideoAutoplayIndex = 0\n\n  @ContentChildren('floVideoAutoplay', { descendants: true }) public readonly videos: QueryList<ElementRef<HTMLVideoElement>>\n\n  private readonly onDestroySource = new Subject()\n  private readonly onDestroy = this.onDestroySource.pipe(share())\n  private readonly canExecute = () => this.floVideoAutoplay === true || this.floVideoAutoplay === ''\n  private readonly maybeVideoElement = () => maybe(this.elmRef.nativeElement).filter(e => e.nodeName === 'VIDEO')\n  private readonly maybeUnmuteActionRef = () => maybe(this.floVideoAutoplayClickUnmuteRef).filter(a => a as any !== '')\n  private readonly maybePlayActionRef = () => maybe(this.floVideoAutoplayClickPlayRef).filter(a => a as any !== '')\n\n  private readonly hideRef = (ref: HTMLElement) => this.rd.setStyle(ref, 'display', 'none')\n  private readonly showRef = (ref: HTMLElement) => this.rd.setStyle(ref, 'display', 'block')\n\n  private readonly volumeChange = (videoElement: HTMLVideoElement) =>\n    fromEvent(videoElement, 'volumechange', { passive: true }).pipe(\n      map(evt => evt.target as HTMLVideoElement),\n      share(),\n      takeUntil(this.onDestroy))\n\n  private readonly initOnVideo = (videoElement: HTMLVideoElement) =>\n    fromEvent(videoElement, 'loadstart').pipe(\n      tap(() => videoElement.setAttribute('autoplay', 'true')),\n      map(evt => evt.target as HTMLVideoElement),\n      tryPlayVideoAsIs,\n      tryPlayVideoMuted,\n      take(1)\n    ).subscribe(res => { // could not autoplay, must click to play\n      res.videoElement.preload = 'none'\n      res.videoElement.muted = false\n      res.videoElement.volume = 1\n      this.maybePlayActionRef().tapSome(this.showRef)\n    })\n\n  constructor(private elmRef: ElementRef<HTMLVideoElement>, private rd: Renderer2) { }\n\n  private readonly runUnmuteSequence = (actionRef: HTMLElement) => (runOnce: boolean) => (videoElement: HTMLVideoElement) => {\n    videoElement.setAttribute('autoplay', 'true')\n    fromEvent(actionRef, 'click').pipe(takeUntil(this.onDestroy)).subscribe(() => {\n      videoElement.muted = false\n      videoElement.volume = 1\n    })\n\n    this.volumeChange(videoElement).pipe(filter(v => !v.muted || v.volume > 0), takeUntil(this.onDestroy))\n      .subscribe(() => this.hideRef(actionRef))\n    const showRef = this.volumeChange(videoElement).pipe(filter(v => v.muted || v.volume <= 0));\n    (runOnce ? showRef.pipe(take(1)) : showRef).subscribe(() => this.showRef(actionRef))\n  }\n\n  ngAfterContentInit() {\n    if (!this.canExecute()) { return }\n\n    this.maybeVideoElement().tapSome(this.initOnVideo)\n    this.videos.map(a => a.nativeElement).forEach(this.initOnVideo)\n\n    this.maybeUnmuteActionRef().tapSome(ref => {\n      this.hideRef(ref)\n\n      either(this.maybeVideoElement().valueOrUndefined(),\n        maybe(this.videos.toArray()[this.floVideoAutoplayIndex]).map(a => a.nativeElement).valueOrUndefined())\n        .tap({\n          left: this.runUnmuteSequence(ref)(false),\n          right: this.runUnmuteSequence(ref)(true)\n        })\n    })\n\n    this.maybePlayActionRef().tapSome(actionRef => {\n      this.hideRef(actionRef)\n\n      fromEvent(actionRef, 'click').pipe(takeUntil(this.onDestroy)).subscribe(() => {\n        this.hideRef(actionRef)\n        this.maybeVideoElement().tapSome(v => v.play())\n      })\n    })\n  }\n\n  ngOnDestroy() {\n    this.onDestroySource.next()\n    this.onDestroySource.complete()\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { FloVideoAutoplayDirective } from './ng-video-autoplay.directive'\n\n@NgModule({\n  declarations: [\n    FloVideoAutoplayDirective\n  ],\n  exports: [\n    FloVideoAutoplayDirective\n  ]\n})\nexport class FloVideoAutoplayModule { }\n"]}